{"version":3,"sources":["BooksAPI.js","components/Book.jsx","components/library.jsx","App.jsx","index.jsx"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Book","book","onUpdateBook","id","shelf","title","authors","imageLinks","className","key","style","width","height","backgroundImage","thumbnail","value","onChange","event","target","map","index","Library","books","to","toUpperCase","length","filter","BooksApp","useState","setBooks","query","setQuery","showingBooks","setShowingBooks","useEffect","fetch","then","res","json","data","updateShelf","method","body","JSON","stringify","BooksAPI","b","concat","updateQuery","response","findIndex","c","exact","path","render","type","placeholder","i","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e323211b.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\"\n\nlet token = localStorage.token\n\nif (!token)\n    token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n    'Accept': 'application/json',\n    'Authorization': token\n}\n\n\nexport const get = (bookId) =>\n    fetch(`${api}/books/${bookId}`, { headers })\n        .then(res => res.json())\n        .then(data => data.book)\n\n\nexport const getAll = () =>\n    fetch(`${api}/books`, { headers })\n        .then(res => res.json())\n        .then(data => data.books)\n\n\nexport const update = (book, shelf) =>\n    fetch(`${api}/books/${book.id}`, {\n        method: 'PUT',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ shelf })\n    }).then(res => res.json())\n\n\nexport const search = (query) =>\n    fetch(`${api}/search`, {\n        method: 'POST',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ query })\n    }).then(res => res.json())\n        .then(data => data.books)","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Book({ book, onUpdateBook }) {\n  Book.propTypes = {\n    book: PropTypes.object.isRequired,\n    onUpdateBook: PropTypes.func.isRequired,\n  };\n\n  const { id, shelf, title, authors, imageLinks } = book;\n  const shelfs = [\"currentlyReading\", \"wantToRead\", \"read\", \"none\"];\n\n  return (\n    <div className=\"book\" id={id} key={id}>\n      <div className=\"book-top\">\n        <div\n          className=\"book-cover\"\n          style={{\n            width: 128,\n            height: 193,\n            backgroundImage: imageLinks ? `url(${imageLinks.thumbnail})` : null,\n          }}\n        ></div>\n        <div className=\"book-shelf-changer\">\n          <select\n            value={shelf || \"none\"}\n            onChange={(event) => {\n              onUpdateBook(book, event.target.value);\n            }}\n          >\n            {shelfs.map((shelf, index) => (\n              <option value={shelf} key={index}>\n                {shelf}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      <div className=\"book-title\">\n        <h2>{title}</h2>\n      </div>\n      <div className=\"book-authors\">{authors}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport Book from \"./Book\";\n\nexport default function Library({ books, onUpdateBook }) {\n  Library.propTypes = {\n    books: PropTypes.array.isRequired,\n    onUpdateBook: PropTypes.func.isRequired,\n  };\n\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-title\">\n        <h1>Library</h1>\n        <div className=\"open-search\">\n          <Link to=\"/search\" />\n        </div>\n      </div>\n      <div className=\"list-books-content\">\n        <div>\n          {[\"currentlyReading\", \"wantToRead\", \"read\"].map((shelf) => (\n            <div className=\"bookshelf\" key={shelf}>\n              <h2 className=\"bookshelf-title\">{shelf.toUpperCase()}</h2>\n              <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                  {books.length > 0 &&\n                    books\n                      .filter((book) => book.shelf === shelf)\n                      .map((book) => (\n                        <li key={book.id}>\n                          <Book\n                            id={book.id}\n                            book={book}\n                            onUpdateBook={onUpdateBook}\n                          />\n                        </li>\n                      ))}\n                </ol>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Library from \"./components/library\";\nimport Book from \"./components/Book\";\nimport \"./App.css\";\n\nexport default function BooksApp() {\n  const [books, setBooks] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [showingBooks, setShowingBooks] = useState([]);\n\n  /**\n   * @description get all books before loading the component\n   */\n  useEffect(() => {\n    BooksAPI.getAll().then((books) => setBooks(books));\n  }, []);\n\n  /**\n   * @description handles moving a book from one shelf to another\n   * @param book\n   * @param shelf\n   */\n  const updateShelf = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(() => {\n      // Change the position of an existing book in the shelf\n      book.shelf = shelf;\n      setBooks(() =>\n        books\n          .filter((b) => b.id !== book.id)\n          .concat(shelf !== \"none\" ? [book] : [])\n      );\n    });\n  };\n\n  /**\n   * @description handling the searching method\n   */\n  const updateQuery = (query) => {\n    setQuery(query);\n    let showingBooks = [];\n    if (query) {\n      BooksAPI.search(query).then((response) => {\n        if (response.length) {\n          showingBooks = response.map((b) => {\n            const index = books.findIndex((c) => c.id === b.id);\n            if (index >= 0) {\n              return books[index];\n            } else {\n              return b;\n            }\n          });\n        }\n        setShowingBooks(showingBooks);\n      });\n    } else {\n      setShowingBooks(showingBooks);\n    }\n  };\n\n  /**\n   * @description renders the app and handles routing\n   */\n  return (\n    <div className=\"app\">\n      <Route\n        exact\n        path=\"/my-reads-app\"\n        render={() => <Library books={books} onUpdateBook={updateShelf} />}\n      />\n      <Route\n        path=\"/search\"\n        render={() => (\n          <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n              <Link className=\"close-search\" to=\"/my-reads-app\">\n                Close\n              </Link>\n              <div className=\"search-books-input-wrapper\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Search by title or author\"\n                  value={query}\n                  onChange={(event) => updateQuery(event.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"search-books-results\">\n              <ol className=\"books-grid\">\n                {showingBooks.map((book, i) => (\n                  <Book\n                    key={i}\n                    book={book}\n                    onUpdateBook={(book, shelf) => updateShelf(book, shelf)}\n                  />\n                ))}\n              </ol>\n            </div>\n          </div>\n        )}\n      />\n    </div>\n  );\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport BooksApp from './App'\nimport './index.css'\n\nReactDOM.render(\n  <BrowserRouter><BooksApp /></BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}