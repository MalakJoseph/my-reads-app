{"version":3,"sources":["BooksAPI.js","components/Book.js","components/library.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Book","this","props","book","onUpdateBook","id","shelf","title","authors","imageLinks","className","key","style","width","height","backgroundImage","thumbnail","value","onChange","event","target","map","index","Component","Library","books","to","toUpperCase","length","filter","BooksApp","useState","setBooks","query","setQuery","showingBooks","setShowingBooks","console","log","useEffect","fetch","then","res","json","data","updateShelf","method","body","JSON","stringify","BooksAPI","state","b","concat","updateQuery","response","findIndex","c","exact","path","render","type","placeholder","i","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7bacd5c8.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\"\n\nlet token = localStorage.token\n\nif (!token)\n    token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n    'Accept': 'application/json',\n    'Authorization': token\n}\n\n\nexport const get = (bookId) =>\n    fetch(`${api}/books/${bookId}`, { headers })\n        .then(res => res.json())\n        .then(data => data.book)\n\n\nexport const getAll = () =>\n    fetch(`${api}/books`, { headers })\n        .then(res => res.json())\n        .then(data => data.books)\n\n\nexport const update = (book, shelf) =>\n    fetch(`${api}/books/${book.id}`, {\n        method: 'PUT',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ shelf })\n    }).then(res => res.json())\n\n\nexport const search = (query) =>\n    fetch(`${api}/search`, {\n        method: 'POST',\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ query })\n    }).then(res => res.json())\n        .then(data => data.books)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Book extends Component {\n\tstatic propTypes = {\n\t\tbook: PropTypes.object.isRequired,\n\t\tonUpdateBook: PropTypes.func.isRequired\n\t}\n\n\trender() {\n\t\tconst { book, onUpdateBook } = this.props\n\t\tconst { id, shelf, title, authors, imageLinks } = book\n\t\tconst shelfs = ['currentlyReading', 'wantToRead', 'read', 'none']\n\n\t\treturn (\n\t\t\t<div className=\"book\" id={id} key={id}>\n\t\t\t\t<div className=\"book-top\">\n\t\t\t\t\t<div className=\"book-cover\" style={{\n\t\t\t\t\t\t\twidth: 128, height: 193,\n\t\t\t\t\t\t\tbackgroundImage: imageLinks ? `url(${imageLinks.thumbnail})`: null }}>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"book-shelf-changer\">\n\t\t\t\t\t\t<select value={shelf || \"none\"} onChange={(event) => {\n\t\t\t\t\t\t\tonUpdateBook(book, event.target.value)\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{shelfs.map((shelf, index) => <option value={shelf} key={index}>{shelf}</option>)}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"book-title\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"book-authors\">{authors}</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Book","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport Book from \"./Book\";\n\nclass Library extends Component {\n  static propTypes = {\n    books: PropTypes.array.isRequired,\n    onUpdateBook: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const { books, onUpdateBook } = this.props;\n\n    return (\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>Library</h1>\n          <div className=\"open-search\">\n            <Link to=\"/search\">Add a book</Link>\n          </div>\n        </div>\n        <div className=\"list-books-content\">\n          <div>\n            {[\"currentlyReading\", \"wantToRead\", \"read\"].map((shelf) => (\n              <div className=\"bookshelf\" key={shelf}>\n                <h2 className=\"bookshelf-title\">{shelf.toUpperCase()}</h2>\n                <div className=\"bookshelf-books\">\n                  <ol className=\"books-grid\">\n                    {books.length > 0 &&\n                      books\n                        .filter((book) => book.shelf === shelf)\n                        .map((book) => (\n                          <li key={book.id}>\n                            <Book\n                              id={book.id}\n                              book={book}\n                              onUpdateBook={onUpdateBook}\n                            />\n                          </li>\n                        ))}\n                  </ol>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Library;\n","import React, { useState, useEffect } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Library from \"./components/library\";\nimport Book from \"./components/Book\";\nimport \"./App.css\";\n\nexport default function BooksApp() {\n  const [books, setBooks] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [showingBooks, setShowingBooks] = useState([]);\n  console.log(books);\n  /**\n   * @description get all books before loading the component\n   */\n  useEffect(() => BooksAPI.getAll().then((books) => setBooks({ books })), []);\n\n  /**\n   * @description handles moving a book from one shelf to another\n   * @param book\n   * @param shelf\n   */\n  const updateShelf = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(() => {\n      // Change the position of an existing book in the shelf\n      book.shelf = shelf;\n      setBooks((state) => ({\n        books: state.books\n          .filter((b) => b.id !== book.id)\n          .concat(shelf !== \"none\" ? [book] : []),\n      }));\n    });\n  };\n\n  /**\n   * @description handling the searching method\n   */\n  const updateQuery = (query) => {\n    setQuery({ query });\n    let showingBooks = [];\n    if (query) {\n      BooksAPI.search(query).then((response) => {\n        if (response.length) {\n          showingBooks = response.map((b) => {\n            const index = books.findIndex((c) => c.id === b.id);\n            if (index >= 0) {\n              return books[index];\n            } else {\n              return b;\n            }\n          });\n        }\n        setShowingBooks({ showingBooks });\n      });\n    } else {\n      setShowingBooks({ showingBooks });\n    }\n  };\n\n  /**\n   * @description renders the app and handles routing\n   */\n  return (\n    <div className=\"app\">\n      <Route\n        exact\n        path=\"/\"\n        render={() => <Library books={books} onUpdateBook={updateShelf} />}\n      />\n\n      <Route\n        path=\"/search\"\n        render={() => (\n          <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n              <Link className=\"close-search\" to=\"/\">\n                Close\n              </Link>\n              <div className=\"search-books-input-wrapper\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Search by title or author\"\n                  value={query}\n                  onChange={(event) => updateQuery(event.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"search-books-results\">\n              <ol className=\"books-grid\">\n                {showingBooks.map((book, i) => (\n                  <Book\n                    key={i}\n                    book={book}\n                    onUpdateBook={(book, shelf) => updateShelf(book, shelf)}\n                  />\n                ))}\n              </ol>\n            </div>\n          </div>\n        )}\n      />\n    </div>\n  );\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport BooksApp from './App'\nimport './index.css'\n\nReactDOM.render(\n  <BrowserRouter><BooksApp /></BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}